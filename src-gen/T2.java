// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/T2.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class T2 {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object A=null;
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=6;
      if ($opEqualY($invokeField("length",args),0)) {
        $line=6;
        A=$fix(GCollections.asSet('a'));
      }
      else {
        $line=8;
        gold.structures.set.ISet $v1=$newSet();
        int $v3=$int(0);
        int $v4=$int($invokeMethod("length",((java.lang.String[])args)[$int(0)],new Object[]{}))-1;
        $v2:for (int i=$v3; i<=$v4; i++) {
          $v1.add($invokeMethod("charAt",((java.lang.String[])args)[$int(0)],new Object[]{i}));
        }
        A=$fix($opDiffeY($v1,GCollections.asSet('&')));
      }
      $line=10;
      GAutomataFrame.show($cast(gold.structures.automaton.IAutomaton.class,T2.createFA()));
      $line=11;
      T2.test($cast(gold.structures.automaton.ITransducer.class,T2.createFA()));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"main",$line);
    }
  }
  public static ITransducer createFA() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=18;
      Object Ls=$fix(A);
      $line=19;
      Object M0=$fix(GCollections.asSet(""));
      $line=20;
      gold.structures.set.ISet $v5=$newSet();
      $v6:for (Object a:GCollections.unmodifiableCollection(Ls)) {
        $v5.add($opAdditY("",a));
      }
      Object M1=$fix($v5);
      $line=21;
      gold.structures.set.ISet $v7=$newSet();
      $v8:for (Object a:GCollections.unmodifiableCollection(Ls)) {
        for (Object b:GCollections.unmodifiableCollection(Ls)) {
          $v7.add($opAdditY($opAdditY("",a),b));
        }
      }
      Object M2=$fix($v7);
      $line=22;
      gold.structures.set.ISet $v9=$newSet();
      $v10:for (Object a:GCollections.unmodifiableCollection(Ls)) {
        for (Object b:GCollections.unmodifiableCollection(Ls)) {
          for (Object c:GCollections.unmodifiableCollection(Ls)) {
            $v9.add($opAdditY($opAdditY($opAdditY("",a),b),c));
          }
        }
      }
      Object M3=$fix($v9);
      $line=24;
      gold.structures.set.ISet $v11=$newSet();
      $v12:for (Object s:GCollections.unmodifiableCollection($opUnionY($opUnionY($opUnionY(M0,M1),M2),M3))) {
        $v11.add(GCollections.asList(s));
      }
      gold.structures.set.ISet $v13=$newSet();
      $v14:for (Object a:GCollections.unmodifiableCollection(M3)) {
        for (Object b:GCollections.unmodifiableCollection($opUnionY($opUnionY(M1,M2),M3))) {
          int $v15=$int(0);
          int $v16=$int(3);
          for (int i=$v15; i<=$v16; i++) {
            $v13.add(GCollections.asList(a,b,i));
          }
        }
      }
      gold.structures.set.ISet $v17=$newSet();
      $v18:for (Object a:GCollections.unmodifiableCollection(M3)) {
        for (Object b:GCollections.unmodifiableCollection($opUnionY($opUnionY(M1,M2),M3))) {
          int $v19=$int(0);
          int $v20=$int(3);
          for (int i=$v19; i<=$v20; i++) {
            for (Object k:GCollections.unmodifiableCollection(GCollections.asSet('!','*','?',""))) {
              $v17.add(GCollections.asList(a,b,i,k));
            }
          }
        }
      }
      Object Q=$fix($opUnionY($opUnionY($opUnionY($v11,$v13),$v17),GCollections.asSet("E","F")));
      $line=29;
      System.out.println($message(new Object[]{Q}));
      $line=31;
      Object \u03A3=$fix($opUnionY(A,GCollections.asSet('&')));
      $line=32;
      Object O=$fix($opUnionY(\u03A3,GCollections.asSet('!','*','?')));
      $line=33;
      Object q_0=$fix(GCollections.asList(""));
      $line=34;
      Object F=$fix(GCollections.asSet("F"));
      $line=35;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,O,q_0,F,new GMethod(T2.class,"\u03B4"),new GMethod(T2.class,"g"),new GMethod(T2.class,"h")});
      if (true) break $try;
      $line=36;
      $rethrow(new RuntimeException("The function \"createFA()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"createFA",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object g(Object x) {
    int $line=0;
    Object $result=null;
    $try:try {
      $result="";
      if (true) break $try;
      $line=38;
      $rethrow(new RuntimeException("The function \"g(x:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"g",$line);
    }
    return $result;
  }
  public static Object test(ITransducer M) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=40;
      java.util.Scanner sc=null;
      sc=$invokeConstructor(java.util.Scanner.class,new Object[]{$invokeField(System.class,"in",true,null)});
      $line=42;
      String string=null;
      string=$defaultValue(String.class);
      $line=45;
      boolean $v21=false;
      while (true) {
        if ($v21) {
          if ($opEqualY(string,"")) break;
        }
        $v21=true;
        $line=47;
        System.out.println($message(new Object[]{"----------------------------"}));
        $line=48;
        System.out.println($message(new Object[]{$opAdditY($opAdditY("Input a string of the form xyz:W. with xyz and W  over ",A),"  (end with an empty string)")}));
        $line=49;
        string=$cast(String.class,$fix(((java.util.Scanner)sc).nextLine()));
        $line=50;
        if (!$opEqualY(string,"")) {
          $line=51;
          Object result=$fix(((gold.structures.automaton.ITransducer)M).acceptsString($cast(java.lang.String.class,string)));
          $line=52;
          System.out.println($message(new Object[]{$opAdditY($opAdditY($opAdditY("The string was ",(($bool(result))?("accepted"):("not accepted"))),". Output: "),((gold.structures.automaton.ITransducer)M).getOutputString())}));
        }
      }
      $line=55;
      System.out.println($message(new Object[]{"Execution Terminated"}));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"test",$line);
    }
    return $result;
  }
  public static String reverse(String s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=60;
      String r=null;
      r=$defaultValue(String.class);
      $line=61;
      Integer i=null;
      i=$defaultValue(Integer.class);
      $line=63;
      r=$cast(String.class,$fix(""));
      $line=64;
      i=$cast(Integer.class,$fix($opSubtrY(((java.lang.String)s).length(),1)));
      $line=66;
      while (true) {
        if (!($opGreaqY(i,0))) break;
        $line=67;
        r=$cast(String.class,$fix($opAdditY(r,((java.lang.String)s).charAt($int(i)))));
        $line=68;
        i=$cast(Integer.class,$fix($opSubtrY(i,1)));
      }
      $line=71;
      $result=r;
      if (true) break $try;
      $line=72;
      $rethrow(new RuntimeException("The function \"reverse(s:String)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"reverse",$line);
    }
    return $cast(String.class,$result);
  }
  public static Object isPalindrome(Object cadena) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=76;
      Integer left=null;
      left=$defaultValue(Integer.class);
      $line=77;
      Integer right=null;
      right=$defaultValue(Integer.class);
      $line=78;
      left=$cast(Integer.class,$fix(0));
      $line=79;
      right=$cast(Integer.class,$fix($opSubtrY($invokeMethod("length",cadena,new Object[]{}),1)));
      $line=81;
      while (true) {
        if (!($opLesstY(left,right))) break;
        $line=82;
        if (!$opEqualY($invokeMethod("charAt",cadena,new Object[]{left}),$invokeMethod("charAt",cadena,new Object[]{right}))) {
          $line=83;
          $result=false;
          if (true) break $try;
        }
        $line=85;
        left=$cast(Integer.class,$fix($opAdditY(left,1)));
        $line=86;
        right=$cast(Integer.class,$fix($opSubtrY(right,1)));
      }
      $line=88;
      $result=true;
      if (true) break $try;
      $line=89;
      $rethrow(new RuntimeException("The function \"isPalindrome(cadena:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"isPalindrome",$line);
    }
    return $result;
  }
  public static Object \u03B4(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=93;
      String actualPalabra=null;
      actualPalabra=$defaultValue(String.class);
      $line=94;
      String anteriorPalabra=null;
      anteriorPalabra=$defaultValue(String.class);
      $line=95;
      Integer progreso=null;
      progreso=$defaultValue(Integer.class);
      $line=96;
      String salida=null;
      salida=$defaultValue(String.class);
      $line=97;
      String s=null;
      s=$defaultValue(String.class);
      $line=98;
      String temp=null;
      temp=$defaultValue(String.class);
      $line=99;
      String nuevaPalabra=null;
      nuevaPalabra=$defaultValue(String.class);
      $line=101;
      if (($opEqualY(q,"E")||$opEqualY(q,"F"))) {
        $line=102;
        $result="E";
        if (true) break $try;
      }
      else {
        $line=105;
        if ($opEqualY(\u03C3,'&')) {
          $line=106;
          if ($opEqualY($opAbsolY(q),1)) {
            $line=107;
            actualPalabra=$cast(String.class,$fix($getArrayValue(q,new Object[]{0})));
            $line=108;
            temp=$cast(String.class,$fix($opAdditY(actualPalabra,"")));
            $line=109;
            if ((!$opEqualY(actualPalabra,"&")&&$opEqualY(((java.lang.String)temp).length(),3))) {
              $line=110;
              $result=GCollections.asList(actualPalabra,"",0);
              if (true) break $try;
            }
            else {
              $line=112;
              $result="E";
              if (true) break $try;
            }
          }
          else {
            $line=115;
            if ($opEqualY($opAbsolY(q),3)) {
              $line=116;
              anteriorPalabra=$cast(String.class,$fix($getArrayValue(q,new Object[]{0})));
              $line=117;
              actualPalabra=$cast(String.class,$fix($getArrayValue(q,new Object[]{1})));
              $line=118;
              progreso=$cast(Integer.class,$fix($getArrayValue(q,new Object[]{2})));
              $line=119;
              temp=$cast(String.class,$fix($opAdditY(actualPalabra,"")));
              $line=121;
              if ($opLesstY(progreso,3)) {
                $line=122;
                $result="E";
                if (true) break $try;
              }
              else {
                $line=124;
                if ($opEqualY(((java.lang.String)temp).length(),3)) {
                  $line=125;
                  $result=GCollections.asList(actualPalabra,"",0);
                  if (true) break $try;
                }
                else {
                  $line=127;
                  $result="E";
                  if (true) break $try;
                }
              }
            }
            else {
              $line=131;
              if ($opEqualY($opAbsolY(q),4)) {
                $line=132;
                anteriorPalabra=$cast(String.class,$fix($getArrayValue(q,new Object[]{0})));
                $line=133;
                actualPalabra=$cast(String.class,$fix($getArrayValue(q,new Object[]{1})));
                $line=134;
                progreso=$cast(Integer.class,$fix($getArrayValue(q,new Object[]{2})));
                $line=135;
                salida=$cast(String.class,$fix($getArrayValue(q,new Object[]{3})));
                $line=136;
                temp=$cast(String.class,$fix($opAdditY(actualPalabra,"")));
                $line=138;
                if (($opEqualY(progreso,3)&&$opEqualY(((java.lang.String)temp).length(),3))) {
                  $line=139;
                  $result=GCollections.asList(actualPalabra,"",0);
                  if (true) break $try;
                }
                else {
                  $line=141;
                  $result="E";
                  if (true) break $try;
                }
              }
              else {
                $line=145;
                $result="E";
                if (true) break $try;
              }
            }
          }
        }
        else {
          $line=149;
          if ($opEqualY($opAbsolY(q),1)) {
            $line=150;
            s=$cast(String.class,$fix($getArrayValue(q,new Object[]{0})));
            $line=151;
            if ($opLesstY(((java.lang.String)s).length(),3)) {
              $line=152;
              $result=GCollections.asList($opAdditY(s,\u03C3));
              if (true) break $try;
            }
            else {
              $line=154;
              $result="E";
              if (true) break $try;
            }
          }
          else {
            $line=158;
            if ($opEqualY($opAbsolY(q),3)) {
              $line=159;
              anteriorPalabra=$cast(String.class,$fix($getArrayValue(q,new Object[]{0})));
              $line=160;
              actualPalabra=$cast(String.class,$fix($getArrayValue(q,new Object[]{1})));
              $line=161;
              progreso=$cast(Integer.class,$fix($getArrayValue(q,new Object[]{2})));
              $line=163;
              if (($opEqualY(actualPalabra,"")&&$opEqualY(\u03C3,'&'))) {
                $line=164;
                $result="E";
                if (true) break $try;
              }
              $line=167;
              if ($opLesstY(((java.lang.String)actualPalabra).length(),2)) {
                $line=168;
                $result=GCollections.asList(anteriorPalabra,$opAdditY(actualPalabra,\u03C3),$opAdditY(progreso,1));
                if (true) break $try;
              }
              else {
                $line=170;
                nuevaPalabra=$cast(String.class,$fix($opAdditY(actualPalabra,\u03C3)));
                $line=172;
                if (!$opEqualY(((java.lang.String)nuevaPalabra).length(),3)) {
                  $line=173;
                  $result="E";
                  if (true) break $try;
                }
                $line=176;
                if ($opEqualY(nuevaPalabra,anteriorPalabra)) {
                  $line=177;
                  if ($bool(T2.isPalindrome(anteriorPalabra))) {
                    $line=178;
                    $result=GCollections.asList(anteriorPalabra,nuevaPalabra,3,"?");
                    if (true) break $try;
                  }
                  else {
                    $line=180;
                    $result=GCollections.asList(anteriorPalabra,nuevaPalabra,3,"*");
                    if (true) break $try;
                  }
                }
                else {
                  $line=182;
                  if ($opEqualY(nuevaPalabra,T2.reverse($cast(java.lang.String.class,anteriorPalabra)))) {
                    $line=183;
                    $result=GCollections.asList(anteriorPalabra,nuevaPalabra,3,"!");
                    if (true) break $try;
                  }
                  else {
                    $line=185;
                    $result=GCollections.asList(anteriorPalabra,nuevaPalabra,3,nuevaPalabra);
                    if (true) break $try;
                  }
                }
              }
            }
            else {
              $line=190;
              if ($opEqualY($opAbsolY(q),4)) {
                $line=191;
                if ($opEqualY(\u03C3,'&')) {
                  $line=192;
                  temp=$cast(String.class,$fix($opAdditY($getArrayValue(q,new Object[]{1}),"")));
                  $line=193;
                  if ($opEqualY(((java.lang.String)temp).length(),3)) {
                    $line=194;
                    $result=GCollections.asList($getArrayValue(q,new Object[]{1}),"",0);
                    if (true) break $try;
                  }
                  else {
                    $line=196;
                    $result="E";
                    if (true) break $try;
                  }
                }
                else {
                  $line=199;
                  $result="E";
                  if (true) break $try;
                }
              }
              else {
                $line=203;
                $result="E";
                if (true) break $try;
              }
            }
          }
        }
      }
      $line=205;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=208;
      if ($opEqualY($opAbsolY(q),4)) {
        $line=209;
        $result=$getArrayValue(q,new Object[]{3});
        if (true) break $try;
      }
      else {
        $line=211;
        $result="";
        if (true) break $try;
      }
      $line=213;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,T2.class,"h",$line);
    }
    return $result;
  }
}
