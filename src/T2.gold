using gold.**

var  A  

procedure main(args:String[]) begin
	if  args.length=0  then  A:= {'a','b'}
	else	
		A := {args[0].charAt(i) |  0 ≤ i < args[0].length()}\{'&'}
    end
	//GAutomataFrame.show(createCoder())
	//test(createFA())
	coder := createCoder()
	decoder := createCoder()
	Utilities.testCodeDecode(coder,decoder)
	
end




function createCoder():ITransducer begin
	Ls := A //alfabeto unicial
	M0 := {""} //estado inicial
	M1 := {""+a|a∈Ls} //estado secundario
	M2 := {""+a+b| a∈Ls,b∈Ls} // terciario
	M3 := {""+a+b+c|a∈Ls,b∈Ls,c∈Ls} //antefinal con tupla de completitud
	
	Q := 
	{⟨s⟩ | s ∈ M0 ∪ M1 ∪ M2 ∪ M3} 
	∪ {⟨a, b⟩ | a ∈ M3, b ∈ (M0∪M1∪M2∪M3)} //a es actual, b es siguiente
	∪ {"E", "F", λ} //estados posibles
	print Q
	
	Σ:= A ∪  {'&'} //alfabeto input
	O := Σ  ∪  { '!', '*', '?'} //alfabeto output
	q₀:=⟨""⟩ //estado inicial
	F:={"F"}  //estado final
	return GDeterministicTransducer(Q,Σ,O,q₀,F,δ,g,h)
end

g(x):= ""


function reverse(s:String):String begin
  var r:String 
  var i:int 
  
  r := ""
  i := s.length() - 1

  while i >= 0 do
    r := r + s.charAt(i)
    i := i - 1
  end

  return r
end


function isPalindrome(cadena) begin
  var left:int
  var right:int
  left := 0
  right := cadena.length() - 1

  while left < right do
    if cadena.charAt(left) ≠ cadena.charAt(right) then
      return false
    end
    left := left + 1
    right := right - 1
  end
  return true
end


function δ(q, σ) begin //sigma es lo leíso, q es el estado
  var actualPalabra:String
  var anteriorPalabra:String
  var progreso:int
  var salida:String
  var temp:String
  var nuevaPalabra:String

  if q = "E" or q = "F" then
    return "E"
    
  //(palabraactual, palabraleyendose, retorno)
    
  // ------------------ Para construir w1 -------------------
  elseif |q| = 1 then
      actualPalabra:= q[0]
   	  if actualPalabra.length()  = 0  and  σ ≠ '&'then
        return   	⟨""+σ⟩
      elseif actualPalabra.length()  = 1  and σ ≠ '&' then
        return   	⟨""+actualPalabra+σ⟩
      elseif actualPalabra.length()  = 2 and σ ≠ '&' then
        return   	⟨""+actualPalabra+σ⟩
      elseif actualPalabra.length() = 3  and σ = '&' then
   	      return   ⟨actualPalabra,""⟩
   	   else 
   	    	return "E"
   	   end

  // ------------------ Si la tupla tiene 2 cositos (anterior y siguiente) -------------------
  elseif |q| = 2 then
  	anteriorPalabra:= q[0]
  	actualPalabra:= q[1]
  	if actualPalabra.length() = 0  and  σ ≠ '&' then
        return   	⟨anteriorPalabra,""+σ⟩
      elseif actualPalabra.length()  = 1  and  σ≠ '&' then
        return   	⟨anteriorPalabra,""+actualPalabra+σ⟩
      elseif actualPalabra.length()  = 2 and σ ≠ '&' then
        return   	⟨anteriorPalabra,""+actualPalabra+σ⟩
      elseif actualPalabra.length() = 3  and σ = '&' then
      	return 		⟨actualPalabra,""⟩
      else 
   	    	return "E"
   	  end
   else if (q==λ) then
   	if σ ≠ '&' then
   		return "F"
   	else
   		return "E"
   	end
   	end
   end
   end

   	   		

function h(q, σ) begin
	var actualPalabra:String
  var anteriorPalabra:String
  var progreso:int
  var salida:String
  var temp:String
  var nuevaPalabra:String

  if q = "E" or q = "F" then
    return ""
    
  //(palabraactual, palabraleyendose, retorno)
    
  // ------------------ Para construir w1 -------------------
  elseif |q| = 1 then
      actualPalabra:= q[0]
   	  if actualPalabra.length()  = 0  and  σ ≠ '&'then
        return   	""+σ
      elseif actualPalabra.length()  = 1  and σ ≠ '&' then
        return   	""+σ
      elseif actualPalabra.length()  = 2 and σ ≠ '&' then
        return   	""+σ
      elseif actualPalabra.length() = 3  and σ = '&' then
   	      return   "&"
   	   else 
   	    	return ""
   	   end

  // ------------------ Si la tupla tiene 2 cositos (anterior y siguiente) -------------------
  elseif |q| = 2 then
  	anteriorPalabra:= q[0]
  	actualPalabra:= q[1]
  	if actualPalabra.length() = 0  and  σ ≠ '&' then
        return   	""
      elseif actualPalabra.length()  = 1  and  σ≠ '&' then
        return   	""
      elseif actualPalabra.length()  = 2 and σ ≠ '&' then
        return   	""
      elseif actualPalabra.length() = 3  and σ = '&' then
      	return funcionRetorno(q,σ)
      else 
   	    	return ""
   	  end
   else
   		return ""
   end
   end
 
 function funcionRetorno(q,σ) begin
 	palabraAnterior := q[0]
 	palabraActual := q[1]
 	if palabraAnterior.length() = 3 and palabraActual.length() = 3 then
		if palabraActual.equals(palabraAnterior) and isPalindrome(palabraAnterior) then
  			return "?&"
  		elseif palabraActual.equals(palabraAnterior) and (!isPalindrome(palabraAnterior)) then
  			return "*&"
  		elseif palabraActual.equals(reverse(palabraAnterior)) and (!isPalindrome(palabraAnterior)) then
  			return "!&"
  		else
  			return palabraActual + "&"
  		end
  	else
  		return ""
  	end
   end






 
